<template>
	<view class="vun-hairline--bottom" @click="jumpLink" :class="setClass" :hover-class="clickable || isLink ? 'vun-cell--hover' : '' " hover-stay-time="70" :style="customStyle">
		<view class="vun-cell-wrap">
			<slot name="icon">
				<vun-icon v-if="icon" :color="iconColor" :size="iconSize" :custom-style="iconStyle" :name="icon" class="vun-cell__left-icon-wrap" />
			</slot>
			
			<slot name="title">
				<view v-if="title" :style="{'width': titleWidth || 'auto'}" class="vun-cell__title title-class"
				 :class="title  ? '' : 'none'">
					<text  class="vun-cell__title__text">{{ title }}</text>
				</view>
			</slot>
			
			<slot>
				<view v-if="value || value === 0" class="vun-cell__value value-class">
					<text class="vun-cell__value__text">{{ value }}</text>
				</view>
			</slot>

			<slot name="right-icon" >
				<vun-icon v-if="isLink" size="32" name="arrow" color="#969799" class="vun-cell__right-icon-wrap" />
			</slot>

			<slot name="extra" />
		</view>
		
		<slot name="label">
			<view v-if="label || useLabelSlot" class="vun-cell__label label-class">
				<text class="vun-cell__label__text">{{ label }}</text>
			</view>
		</slot>
	
	</view>
</template>

<script>
	import VunIcon from '../vun-icon/index.nvue';
	import { bem } from '../wxs/utils.js';
	export default {
		components: {
			VunIcon
		},
		props: {
			url: String,
			title: null,
			value: null,
			icon: String,
			size: String,
			label: String,
			center: Boolean,
			isLink: Boolean,
			required: Boolean,
			clickable: Boolean,
			titleWidth: String,
			customStyle: String,
			useLabelSlot: Boolean,
			linkType: {
				type: String,
				default: 'navigateTo'
			},
			iconColor: {
				type: String,
				default: '#333'
			},
			iconStyle: Object,
			iconSize:  {
				type: String,
				default: '40'
			},
			border: {
				type: Boolean,
				default: true
			}
		},
		data() {
			return {
				setClass: ''
			};
		},
		created() {
			this.setClass = bem('cell', [this.size, {
				center: this.center,
				required: this.required,
				borderless: !this.border,
				clickable: this.isLink || this.clickable
			}])
		},
		methods: {
			jumpLink(urlKey) {
				const url = this.url;
				if (url) {
					uni[this.linkType]({
						url
					});
				}
			}
		}
	};
</script>

<style scoped lang="scss">
	@import './index.scss';
</style>
