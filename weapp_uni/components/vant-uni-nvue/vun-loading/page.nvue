<template>
	<div :class="['loading-container',showLoading && needMask && 'loading-need-mask']" @click="maskClicked" :style="maskStyle">
		<div class="vun-loading" :style="{ top: topPosition +'px'}" v-if="showLoading">
			<div :class="['loading-box',loading.class]" :aria-hidden="true">
				<image :src="loading.url" class="loading-trip-image" resize="contain" quality="original"></image>
				<text v-if="loadingText" class="loading-text">{{loadingText}}</text>
			</div>
		</div>
	</div>
</template>

<script>
	import {
		GIF,
		BLACK_GIF
	} from './type';
	import { Utils } from '../wxs/utils.js';
	export default {
		props: {
			show: {
				type: Boolean,
				default: false
			},
			loadingText: {
				type: String,
				default: ''
			},
			type: {
				type: String,
				default: 'default'
			},
			interval: {
				type: [Number, String],
				default: 0
			},
			needMask: {
				type: Boolean,
				default: false
			},
			maskStyle: {
				type: Object,
				default: () => ({
					height: Utils.env.getPageHeight() + 'px'
				})
			}
		},
		data: () => ({
			showLoading: false,
			tid: 0
		}),
		watch: {
			show() {
				this.setShow();
			}
		},
		computed: {
			loading() {
				let loading = {};
				switch (this.type) {
					case 'trip':
						loading = {
							url: GIF,
							class: 'trip-loading'
						};
						break;
					default:
						loading = {
							url: BLACK_GIF,
							class: 'default-loading'
						}
				}
				return loading;
			},
			topPosition() {
				return (Utils.env.getPageHeight() - 200) / 2;
			}
		},
		created() {
			this.setShow();
		},
		methods: {
			maskClicked() {
				this.needMask && (this.$emit('onLoadingMask', {}));
			},
			setShow() {
				const {
					interval,
					show,
					showLoading
				} = this;
				const stInterval = parseInt(interval);
				clearTimeout(this.tid);
				if (show) {
					if (showLoading) {
						return;
					}
					if (stInterval === 0) {
						this.showLoading = true;
					} else {
						this.tid = setTimeout(() => {
							this.showLoading = true;
						}, stInterval);
					}
				} else {
					this.showLoading = false;
				}
			}
		}
	};
</script>

<style scoped>
	.loading-container {
		position: relative;
	}

	.loading-need-mask {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.2);
	}

	.vun-loading {
		position: fixed;
		left: 287upx;
		top: 500upx;
		z-index: 9999;
	}

	.loading-box {
		align-items: center;
		justify-content: center;
		border-radius: 20upx;
		width: 175upx;
		height: 175upx;
		background-color: rgba(0, 0, 0, 0.8);
	}

	.trip-loading {
		background-color: rgba(0, 0, 0, .2);
	}

	.loading-trip-image {
		height: 75upx;
		width: 75upx;
	}

	.loading-text {
		color: #ffffff;
		font-size: 24upx;
		line-height: 30upx;
		height: 30upx;
		margin-top: 8upx;
		text-overflow: ellipsis;
		width: 140upx;
		text-align: center;
	}
</style>
