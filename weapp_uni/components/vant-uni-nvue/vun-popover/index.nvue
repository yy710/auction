<template>
	<view class="wrapper">
		<vun-overlay :show="show" v-if="show" ref="overlay" v-bind="overlayCfg" @close="hideAction"></vun-overlay>
		<view ref="vun-popover" class="g-popover" v-if="show && buttons.length" :style="contentStyle">
			<view class="u-popover-arrow" :style="arrowStyle"></view>
			<view class="u-popover-inner">
				<view :class="['i-btn',i === buttons.length-1 ? 'i-btn-noborder' : '']" v-for="(item,i) in buttons" :key="i" @click="wxcButtonClicked(i,item.key)">
					<image :src="item.icon" v-if="item.icon" class="btn-icon"></image>
					<text class="btn-text" :style="textStyle">{{item.text}}</text>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	const animation = weex.requireModule('animation');
	import VunOverlay from '../vun-overlay';
	export default {
		components: {
			VunOverlay
		},
		props: {
			buttons: {
				type: Array,
				default: []
			},
			position: {
				type: Object,
				default: () => ({
					x: 0,
					y: 0
				})
			},
			arrowPosition: {
				type: Object,
				default: () => ({
					pos: 'top',
					x: 0,
					y: 0
				})
			},
			coverColor: {
				type: String,
				default: 'rgba(0, 0, 0, 0.4)'
			},
			hasAnimation: {
				type: Boolean,
				default: true
			},
			textStyle: {
				type: Object,
				default: () => ({})
			}
		},
		data: () => ({
			show: false,
			showIn: false
		}),
		computed: {
			transformOrigin() {
				const {
					x = 0, y = 0, pos = 'top'
				} = this.arrowPosition;
				let _origins = [];
				switch (pos) {
					case 'top':
					case 'bottom':
						_origins = [x < 0 ? 'right' : 'left', pos];
						break;
					case 'left':
					case 'right':
						_origins = [pos, y < 0 ? 'bottom' : 'top'];
						break;
				}
				return _origins.join(' ');
			},
			contentTransform() {
				const {
					pos = 'top'
				} = this.arrowPosition;
				let {
					x = 0, y = 0
				} = this.arrowPosition;
				const _translates = ['scale(0)'];
				if (x >= 0 && x < 22) {
					x = 22;
				} else if (x < 0 && x > -22) {
					x = -22;
				}
				if (y >= 0 && y < 22) {
					y = 22;
				} else if (y < 0 && y > -22) {
					y = -22;
				}
				switch (pos) {
					case 'top':
					case 'bottom':
						_translates[1] = `translateX(${x < 0 ? (x - 15) : (x + 15)}px)`;
						break;
					case 'left':
					case 'right':
						_translates[1] = `translateY(${y < 0 ? (y - 15) : (y + 15)}px)`
						break;
				}
				return _translates.join(' ');
			},
			contentStyle() {
				const {
					x = 0, y = 0
				} = this.position;
				const style = {};
				x < 0 ? (style.right = `${-x}px`) : (style.left = `${x}px`);
				y < 0 ? (style.bottom = `${-y}px`) : (style.top = `${y}px`);
				style.opacity = this.hasAnimation || !this.showIn ? '0' : '1';
				style.transform = this.hasAnimation || !this.showIn ? this.contentTransform : 'scale(1)';
				style.transformOrigin = this.transformOrigin;
				return style;
			},
			arrowStyle() {
				let {
					x = 0, y = 0
				} = this.arrowPosition;
				const {
					pos = 'top'
				} = this.arrowPosition;
				const style = {};
				switch (pos) {
					case 'top':
						style.top = '8px';
					case 'bottom': //eslint-disable-line
						!style.top && (style.bottom = '8px');
						style.transform = 'scaleX(0.8) rotate(45deg)';
						if (x >= 0 && x < 22) {
							x = 22;
						} else if (x < 0 && x > -22) {
							x = -22;
						}
						x < 0 ? (style.right = `${-x}px`) : (style.left = `${x}px`);
						break;
					case 'left':
						style.left = '8px';
					case 'right': //eslint-disable-line
						!style.left && (style.right = '8px');
						style.transform = 'scaleY(0.8) rotate(45deg)';
						if (y >= 0 && y < 22) {
							y = 22;
						} else if (y < 0 && y > -22) {
							y = -22;
						}
						y < 0 ? (style.bottom = `${-y}px`) : (style.top = `${y}px`);
						break;
					default:
						break;
				}
				return style;
			}
		},
		methods: {
			wxcPopoverShow() {
				if (this.animationLock) {
					return;
				}
				this.show = true;
				if (this.hasAnimation) {
					setTimeout(() => this.wxcPopoverAnimationShow(), 40)
				} else {
					setTimeout(() => (this.showIn = true), 40);
				}
			},
			/**
			 * smooth in
			 **/
			wxcPopoverAnimationShow() {
				const popoverEl = this.$refs['vun-popover'];
				if (!popoverEl) return
				this.setAnimationLock();
				animation.transition(popoverEl, {
					styles: {
						opacity: 1,
						transform: 'scale(1)',
						transformOrigin: this.transformOrigin
					},
					delay: 0,
					duration: 250,
					timingFunction: 'ease-out'
				}, (e) => {
					this.animationLock = false
				})
			},
			wxcButtonClicked(index, key) {
				if (this.animationLock) {
					return;
				}
				this.$emit('onItem', {
					key,
					index
				});
				this.hideAction();
			},
			/**
			 * 隐藏操作
			 */
			hideAction() {
				if (this.animationLock) return
				if (this.hasAnimation) {
					this.setAnimationLock()
					const popoverEl = this.$refs['vun-popover'];
					if (!popoverEl) return
					animation.transition(popoverEl, {
						styles: {
							opacity: 0,
							transform: this.contentTransform,
							transformOrigin: this.transformOrigin
						},
						duration: 250
					}, () => {
						this.show = false;
						this.showIn = false;
						this.animationLock = false
					});
				} else {
					this.show = false;
					this.showIn = false;
				}
			},
			/**
			 * 设置动画锁
			 */
			setAnimationLock() {
				this.animationLock = true;
			}

		}
	};
</script>

<style scoped lang="scss">
	@import './index.scss'
</style>
